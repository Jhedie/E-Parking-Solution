import { ParkingReservation } from "../../../parkingReservation";

export class ParkingReservationClientModel extends ParkingReservation {
  static kReservationId = "reservationId";
  static kUserId = "userId";
  static kUserEmail = "userEmail";
  static kSlotId = "slotId";
  static kLotId = "lotId";
  static kVehicleId = "vehicleId";
  static kStartTime = "startTime";
  static kEndTime = "endTime";
  static kUsedRates = "usedRates";
  static kTotalAmount = "totalAmount";
  static kParkingStatus = "parkingStatus";
  static kPaymentStatus = "paymentStatus";
  static kCheckedIn = "checkedIn";
  static kOverStayedHandled = "overStayedHandled";
  static kStripeCustomerId = "stripeCustomerId";
  static kModifiedAt = "modifiedAt";
  static kCreatedAt = "createdAt";
  static kStartNotificationSent = "startNotificationSent";
  static kEndNotificationSent = "endNotificationSent";

  static fromEntity(entity: ParkingReservation): ParkingReservationClientModel {
    return Object.assign(ParkingReservationClientModel.empty(), entity);
  }

  static empty(): ParkingReservationClientModel {
    return new ParkingReservationClientModel(
      "", // reservationId
      "", // userId
      "", // userEmail
      "", // slotId
      "", // lotId
      "", // vehicleId
      null, // startTime
      null, // endTime
      [], // usedRates
      0, // totalAmount
      null, // parkingStatus
      null, // paymentStatus
      false, // checkedIn
      false, // overStayedHandled
      "", // stripeCustomerId
      new Date(), // modifiedAt
      new Date(), // createdAt
      false, // startNotificationSent
      false // endNotificationSent
    );
  }

  private static _validate(body: any) {}

  static validate(
    body: any,
    userId: string,
    slotId: string,
    lotId: string
  ): ParkingReservationClientModel {
    this._validate(body);

    return new ParkingReservationClientModel(
      null, // reservationId is null as it will be generated by Firestore
      userId, // userId
      body[this.kUserEmail], // userEmail
      slotId, // slotId
      lotId, // lotId
      body[this.kVehicleId],
      new Date(body[this.kStartTime]),
      new Date(body[this.kEndTime]),
      body[this.kUsedRates],
      body[this.kTotalAmount],
      body[this.kParkingStatus],
      body[this.kPaymentStatus],
      false, // checkedIn
      false, // overStayedHandled
      body[this.kStripeCustomerId],
      new Date(), // modifiedAt
      new Date(), // createdAt
      false, // startNotificationSent
      false // endNotificationSent
    );
  }

  toBodyPublicReservation(): any {
    return {
      [ParkingReservationClientModel.kReservationId]: this.reservationId,
      [ParkingReservationClientModel.kSlotId]: this.slotId,
      [ParkingReservationClientModel.kUserId]: this.userId,
      [ParkingReservationClientModel.kUserEmail]: this.userEmail,
      [ParkingReservationClientModel.kLotId]: this.lotId,
      [ParkingReservationClientModel.kVehicleId]: this.vehicleId,
      [ParkingReservationClientModel.kStartTime]: this.startTime.toISOString(),
      [ParkingReservationClientModel.kEndTime]: this.endTime.toISOString(),
      [ParkingReservationClientModel.kUsedRates]: this.usedRates,
      [ParkingReservationClientModel.kTotalAmount]: this.totalAmount,
      [ParkingReservationClientModel.kParkingStatus]: this.parkingStatus,
      [ParkingReservationClientModel.kPaymentStatus]: this.paymentStatus,
      [ParkingReservationClientModel.kCheckedIn]: this.checkedIn,
    };
  }

  toBodyFullReservation(): any {
    return {
      ...this.toBodyPublicReservation(),
      [ParkingReservationClientModel.kUserId]: this.userId,
      [ParkingReservationClientModel.kStripeCustomerId]: this.stripeCustomerId,
      [ParkingReservationClientModel.kCreatedAt]: this.createdAt,
      [ParkingReservationClientModel.kModifiedAt]: this.modifiedAt,
      [ParkingReservationClientModel.kStartNotificationSent]:
        this.startNotificationSent,
      [ParkingReservationClientModel.kEndNotificationSent]:
        this.endNotificationSent,
      [ParkingReservationClientModel.kOverStayedHandled]: this.overStayedHandled,
    };
  }
}
