import { GeoPoint } from "firebase-admin/firestore";
import { ParkingLot } from "../../../parkingLot";

export class ParkingLotClientModel extends ParkingLot {
  static kLotId = "LotId";
  static kLotName = "LotName";
  static kDescription = "Description";
  static kCoordinates = "Coordinates";
  static kOwner = "Owner";
  static kAddress = "Address";
  static kCapacity = "Capacity";
  static kOccupancy = "Occupancy";
  static kLiveStatus = "LiveStatus";
  static kRate = "Rate";
  static kOperatingHours = "OperatingHours";
  static kFacilities = "Facilities";
  static kCreatedAt = "createdAt";

  static fromEntity(parkingLot: ParkingLot): ParkingLotClientModel {
    return Object.assign(ParkingLotClientModel.empty(), parkingLot);
  }

  static empty() {
    return new ParkingLotClientModel(
      "", // LotId
      "", // LotName
      "", // Description
      new GeoPoint(0, 0), // Default Coordinates
      "", // Owner
      {
        street: "",
        city: "",
        state: "",
        country: "",
        postalCode: "",
      }, // Empty Address
      0, // Capacity
      0, // Occupancy
      "Low", // LiveStatus
      "", // OperatingHours
      [], // Facilities
      new Date() // Current date
    );
  }

  //TODO: Add validation for parking lot data
  private static _validate(body: any) {
    //Validation logic to be done here
  }

  static validate(body: any, parkingOwnerId: string): ParkingLotClientModel {
    this._validate(body);
    // Assuming 'body' has all necessary fields to construct a ParkingLotClientModel
    return new ParkingLotClientModel(
      null, // LotId is null as it will be generated by Firestore
      body[ParkingLotClientModel.kLotName],
      body[ParkingLotClientModel.kDescription],
      body[ParkingLotClientModel.kCoordinates],
      parkingOwnerId,
      body[ParkingLotClientModel.kAddress],
      body[ParkingLotClientModel.kCapacity],
      body[ParkingLotClientModel.kOccupancy],
      body[ParkingLotClientModel.kLiveStatus],
      body[ParkingLotClientModel.kOperatingHours],
      body[ParkingLotClientModel.kFacilities],
      null // createdAt is null as it will be generated by Firestore
    );
  }

  /**
   * Converts the instance of ParkingLotClientModel to a full parking lot object.
   * This includes all properties of the parking lot, including those that are only available when the user is authenticated.
   * @returns {Object} An object that represents the full parking lot.
   */
  toBodyFullParkingLot() {
    return {
      ...this.toBodyPublicParkingLot(),
      [ParkingLotClientModel.kLotId]: this.LotId,
      [ParkingLotClientModel.kOwner]: this.Owner,
      [ParkingLotClientModel.kCreatedAt]: this.createdAt,
    };
  }
  /**
   * Converts the instance of ParkingLotClientModel to a public parking lot object.
   * This includes only the properties of the parking lot that are available to unauthenticated users.
   * @returns {Object} An object that represents the public parking lot.
   */
  toBodyPublicParkingLot() {
    return {
      [ParkingLotClientModel.kLotName]: this.LotName,
      [ParkingLotClientModel.kAddress]: this.Address,
      [ParkingLotClientModel.kCoordinates]: this.Coordinates,
      [ParkingLotClientModel.kDescription]: this.Description,
      [ParkingLotClientModel.kCapacity]: this.Capacity,
      [ParkingLotClientModel.kOccupancy]: this.Occupancy,
      [ParkingLotClientModel.kOperatingHours]: this.OperatingHours,
      [ParkingLotClientModel.kFacilities]: this.Facilities,
      [ParkingLotClientModel.kLiveStatus]: this.LiveStatus,
    };
  }
}
