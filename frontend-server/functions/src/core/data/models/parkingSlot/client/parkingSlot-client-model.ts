import { ParkingSlot } from "../../../parkingSlot";

export class ParkingSlotClientModel extends ParkingSlot {
  static kSlotId = "slotId";
  static kType = "type";
  static kStatus = "status";
  static kPosition = "position";
  static kCreatedAt = "createdAt"; // Key for createdAt field

  static fromEntity(parkingSlot: ParkingSlot): ParkingSlotClientModel {
    return Object.assign(ParkingSlotClientModel.empty(), parkingSlot);
  }

  static empty(): ParkingSlotClientModel {
    return new ParkingSlotClientModel(
      "", // SlotId
      "", // Type
      "", // Status
      { row: "", column: 0 }, // Position
      new Date() // createdAt
    );
  }

  private static _validate(body: any) {
    //TODO: Commented out as the flow would ensure that these validations will done.
    // validateLotIdExists(body);
    // validatePosition(body);
    // validateDuplicateSlotPosition(body);
  }

  static validate(body: any): ParkingSlotClientModel {
    this._validate(body);
    return new ParkingSlotClientModel(
      null, // SlotId is null as it will be generated by Firestore
      body[this.kType],
      body[this.kStatus],
      body[this.kPosition],
      null // createdAt is null as it will be generated by Firestore
    );
  }

  toBodyPublicParkingSlot(): any {
    return {
      [ParkingSlotClientModel.kSlotId]: this.slotId,
      [ParkingSlotClientModel.kType]: this.type,
      [ParkingSlotClientModel.kStatus]: this.status,
      [ParkingSlotClientModel.kPosition]: this.position,
    };
  }

  toBodyFullParkingSlot(): any {
    // Extend public representation with additional details suitable for public viewing
    return {
      ...this.toBodyPublicParkingSlot(),
      [ParkingSlotClientModel.kCreatedAt]: this.createdAt,
    };
  }
}
